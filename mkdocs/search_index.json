{
    "docs": [
        {
            "location": "/",
            "text": "ARCHITECTURE OF ID-SOFTWARE\n\n\nDocument version: 0.6\n\nSoftware version: 3.12\n\nLast updated: 15.02.2016\n\n\nIntroduction\n\n\nThe purpose of this document is to describe the architecture of ID-software. \n\n\nID-software\n is a collection of software components offering support for PKI-based functionality, i.e. operations with different cryptographic tokens (e.g. eID cards), handling digitally signed documents, file encryption/decryption and signing and authentication in web environment. The ID-software comprises end-user applications, software libraries, web components, drivers for communicating with the cryptographic tokens and other complementary components.  \n\n\nThis document covers description of ID-software and its components, their deployment in different environments, provided and required interfaces. The document does not include components that have reached the end of their support nor the components that have not yet been released.  \n\n\nThe document is based on the latest released state of the ID-software components. At the time of writing, the latest released version of ID-software is \nversion 3.12\n. Latest version numbers of the various ID-software components are provided at \nhttp://www.id.ee/?lang=en&id=36798\n.\n\n\nThe document is targeted for:\n\n\n\n\nOwners/managers of the software;\n\n\nContractors;\n\n\nContributors interested in developing ad-hoc solutions;\n\n\nIntegrators/software developers interested in integrating the software with third-party information systems;\n\n\nInternational audience \u2013 contributors/integrators from countries other than Estonia who wish to use the software internationally and/or contribute in its development.\n\n\n\n\nBackground\n\n\nThe main owner/manager of the ID-software is Estonian Information System Authority (RIA, \nhttps://www.ria.ee/en/\n).\n\nMain contractor for developing the software is AS Sertifitseerimiskeskus (SK, \nhttps://sk.ee/en\n). In case of a few of the components, SK is also the owner.  \n\n\nDevelopment of ID-software has been mainly done in Estonia, however, the ID-software is released for international usage.\n\nThe software is distributed open-source (mainly under LGPL/BSD licence) and is accessible from the following locations:\n\n\n\n\nGitHub repository for the source code, wiki documentation, beta and (optionally) production versions of binary packages: \nhttps://github.com/open-eid\n.\n\n\nRelease repository for production versions of binaries: \nhttps://installer.id.ee/\n\n\n\n\nID-software components can be logically divided in the following groups:\n\n\n\n\nDesktop applications\n for end-users;\n\n\nSoftware libraries\n for integrators/software developers to integrate the libraries\u2019 functionality with third-party information systems/applications;\n\n\nWeb components\n for integrators/software developers to add the signature creation and authentication functionality in web environment to third-party web applications;\n\n\nDrivers\n for communication with the cryptographic tokens that conduct the PKI operations;\n\n\nOther (supportive) components\n for packaging, installation, updating and centrally handling changes of the configuration settings in software.\n\n\n\n\nThe following table maps the main ID-software components, their owner/developer (i.e. the main contractor) and the functionality they offer.\n\n\nTable: Mapping of ID-software components and functions\n\n\n\n\n\n\n\n\n\n\n\n\n\nComponent\n\n\n\n\n\n\n\nFunction\n\n\n\n\n\n\n\nOwner/  \nDeveloper\n\n\n\n\n\n\n\nLicence\n\n\n\n\n\n\n\n\n\n\n\n\n\nHandling BDOC documents\n\n\n\n\n\nHandling DDOC documents\n\n\n\n\n\nHandling CDOC documents\n\n\n\n\n\n\n\nCalculating RSA signature\n\n\n\n\n\n\n\nCard management operations\n\n\n\n\n\n\n\nAuthentication\n\n\n\n\n\n\n\n\n\n\n\n\n\nDesktop applications\n\n\n\n\n\n\n\nDigiDoc3 Client (incl. DigiDoc3 Crypto)\n\n\n\n\n\n\n\nyes (1)\n\n\n\n\n\nyes - validation only (1)\n\n\n\n\n\nyes\n\n\n\n\n\n\n\n-\n\n\n\n\n\n\n\n-\n\n\n\n\n\n\n\n-\n\n\n\n\n\n\n\nRIA/SK\n\n\n\n\n\n\n\nLGPL\n\n\n\n\n\n\n\n\n\n\n\n\n\nID-card utility\n\n\n\n\n\n\n\n-\n\n\n\n\n\n-\n\n\n\n\n\n-\n\n\n\n\n\n\n\n-\n\n\n\n\n\n\n\nyes (1)\n\n\n\n\n\n\n\n-\n\n\n\n\n\n\n\nRIA/SK\n\n\n\n\n\n\n\nLGPL\n\n\n\n\n\n\n\n\n\n\n\n\n\nSoftware libraries\n\n\n\n\n\n\n\nJDigiDoc (Java)\n\n\n\n\n\n\n\nyes (2)\n\n\n\n\n\nyes\n\n\n\n\n\nyes\n\n\n\n\n\n\n\nyes (1)\n\n\n\n\n\n\n\n-\n\n\n\n\n\n\n\n-\n\n\n\n\n\n\n\nRIA/SK\n\n\n\n\n\n\n\nLGPL\n\n\n\n\n\n\n\n\n\n\n\n\n\nDigiDoc4j (Java)\n\n\n\n\n\n\n\nyes\n\n\n\n\n\nyes (1)\n\n\n\n\n\n-\n\n\n\n\n\n\n\nyes (1)\n\n\n\n\n\n\n\n-\n\n\n\n\n\n\n\n-\n\n\n\n\n\n\n\nRIA/SK\n\n\n\n\n\n\n\nLGPL\n\n\n\n\n\n\n\n\n\n\n\n\n\nLibdigidocpp (C++)\n\n\n\n\n\n\n\nyes\n\n\n\n\n\nyes (1)\n\n\n\n\n\n-\n\n\n\n\n\n\n\nyes (1)\n\n\n\n\n\n\n\n-\n\n\n\n\n\n\n\n-\n\n\n\n\n\n\n\nRIA/SK\n\n\n\n\n\n\n\nLGPL\n\n\n\n\n\n\n\n\n\n\n\n\n\nCDigiDoc (C)\n\n\n\n\n\n\n\n-\n\n\n\n\n\nyes\n\n\n\n\n\nyes\n\n\n\n\n\n\n\nyes (1)\n\n\n\n\n\n\n\n-\n\n\n\n\n\n\n\n-\n\n\n\n\n\n\n\nRIA/SK\n\n\n\n\n\n\n\nLGPL\n\n\n\n\n\n\n\n\n\n\n\n\n\nNDigiDoc (.NET)\n\n\n\n\n\n\n\n-\n\n\n\n\n\n-\n\n\n\n\n\nyes\n\n\n\n\n\n\n\n-\n\n\n\n\n\n\n\n-\n\n\n\n\n\n\n\n-\n\n\n\n\n\n\n\nSK/SK\n\n\n\n\n\n\n\nBSD3\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeb components\n\n\n\n\n\n\n\nBrowser signing modules\n\n\n\n\n\n\n\n-\n\n\n\n\n\n-\n\n\n\n\n\n-\n\n\n\n\n\n\n\nyes (1)\n\n\n\n\n\n\n\n-\n\n\n\n\n\n\n-\n\n\n\n\nRIA/SK\n\n\n\n\nLGPL\n\n\n\n\n\n\n\n\nhwcrypto.js (JavaScript)\n\n\n\n\n-\n\n\n\n-\n\n\n\n-\n\n\n\n\nyes (1)\n\n\n\n\n-\n\n\n\n\n-\n\n\n\n\nRIA/SK\n\n\n\n\nMIT\n\n\n\n\n\n\n\n\npkcs11-module-loader\n\n\n\n\n-\n\n\n\n-\n\n\n\n-\n\n\n\n\n-\n\n\n\n\n-\n\n\n\n\nyes (3)\n\n\n\n\nRIA/SK\n\n\n\n\nLGPL\n\n\n\n\n\n\n\n\nDriver components\n\n\n\n\nMinidriver\n\n\n\n\n-\n\n\n\n-\n\n\n\n-\n\n\n\n\nyes (1)\n\n\n\n\n-\n\n\n\n\nyes (1)\n\n\n\n\nRIA/SK\n\n\n\n\nLGPL/BSD3\n\n\n\n\n\n\n\n\nEstEID-pkcs11\n\n\n\n\n-\n\n\n\n-\n\n\n\n-\n\n\n\n\nyes (1)\n\n\n\n\n-\n\n\n\n\nyes (1)\n\n\n\n\nRIA/SK\n\n\n\n\n-\n\n\n\n\n\n\n\n\nEstEID-tokend\n\n\n\n\n-\n\n\n\n-\n\n\n\n-\n\n\n\n\nyes (1)\n\n\n\n\n-\n\n\n\n\nyes (1)\n\n\n\n\nRIA/SK\n\n\n\n\nAPSL / LGPL\n\n\n\n\n\n\n\n\nSmartcardpp\n\n\n\n\n-\n\n\n\n-\n\n\n\n-\n\n\n\n\nyes (1)\n\n\n\n\nyes (1)\n\n\n\n\nyes (1)\n\n\n\n\nRIA/SK\n\n\n\n\nLGPL/BSD3\n\n\n\n\n\n\n\n\n\n\nRemarks:\n\n\n(1) - The functionality is provided via base components.\n\n(2) - Only BDOC with time-marks is supported (TM profile). Additional information is provided in the component's documentation.\n\n(3) - The component is used only once for setting the proper parameters for authentication in Firefox browser.  \n\n\nThe main functions offered by ID-software are described in the following table.\n\n\nTable: Functions offered by ID-software\n\n\n\n\n\n\n\n\nFunction\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nHandling BDOC documents\n\n\nHandling documents in \nBDOC 2.1\n (XAdES/ASiC-E) digital signature format that is a profile of \nETSI XAdES\n (XML Advanced Electronic Signature) and \nETSI ASiC\n formats. More information on the formats\u2019 life cycle can be found from \nhttp://www.id.ee/?lang=en&id=34336\n .\n\n\n\n\n\n\nHandling DDOC documents\n\n\nHandling documents in \nDIGIDOC-XML 1.3 (DDOC)\n digital signature format that is a profile of \nETSI XAdES\n (XML Advanced Electronic Signature) format. More information on the formats\u2019 life cycle can be found from \nhttp://www.id.ee/?lang=en&id=34336\n\n\n\n\n\n\nCalculating RSA signature\n\n\nCalculating the RSA signature value in browser or desktop/server environment. The operation involves connecting with the signature token\u2019s driver, sending the data to be signed and receiving digital signature value calculated with the token owner\u2019s RSA private key. The following cryptographic tokens are supported: hardware-based tokens (e.g. PKCS#11-based eID cards, USB cryptostick and Mobile-ID); software-based tokens (e.g. PKCS#12 software token)\n\n\n\n\n\n\nHandling CDOC documents\n\n\nEncrypting and decrypting documents in \nENCDOC-XML 1.0 (CDOC)\n format.\n\n\n\n\n\n\nCard management operations\n\n\nRenewal of the certificates on the card, PIN/PUK management, reading personal data file.\n\n\n\n\n\n\nAuthentication\n\n\nAuthentication with ID-card. The operation is generally done via native operating system/browser components. In case of Estonian ID-cards and Firefox browser, a PKCS#11 module loader script is used for setting the proper parameters for authentication in Firefox browser.\n\n\n\n\n\n\n\n\n\n\nComponent model\n\n\nThe following chapter depicts ID-software component diagrams, including variations of the components used in different supported environments.\n\nIn the context of the component diagrams in this document, the ID-software components have been divided to three different packages to show the component\u2019s owner/developer:\n\n\n\n\nComponents of ID-software that are owned by RIA and developed by SK: \nplaced in \u201cRIA/SK\u201d package\n;\n\n\nComponents of ID-software that are owned and operated by RIA: \nplaced in \u201cRIA\u201d package;\n\n\nComponents of ID-software that are owned and developed by SK: \nplaced in \u201cSK\u201d package.\n\n\n\n\nOther components are regarded as external to ID-software.\n\nNote that not all of the external base libraries are included in the component model to avoid duplicity with other documentation \u2013 the base libraries are listed and described in the documentation of the respective ID-software components and can be accessed via the references provided.\n\n\n\n\nDesktop applications\n\n\n\n\nDigiDoc3 Client\n\n\n\n\nFigure: Components of DigiDoc3 Client\n\n\nTable: Components of DigiDoc3 Client\n\n\n\n\n\n\n\n\nComponent\n\n\nDescription\n\n\nOwner/ Developer\n\n\n\n\n\n\n\n\n\n\nDigiDoc3 Client\n\n\nEnd-user desktop applications that own a common GUI. DigiDoc3 Client enables handling digitally signed documents. DigiDoc3 Crypto subcomponent enables file encryption/decryption. Wiki: \nhttps://github.com/open-eid/qdigidoc/wiki\n Code repository: \nhttps://github.com/open-eid/qdigidoc\n\n\nRIA/SK\n\n\n\n\n\n\nDigiDoc3 Client base libraries\n\n\nLibdigidocpp (and its base libraries, including CDigiDoc), etc. See \nID-card utility's interfaces\n\n\n-\n\n\n\n\n\n\nError reports repository\n\n\nRepository where the DigiDoc3 Client application\u2019s and ID-card utility program\u2019s error reports (generated with BreakPad base library) are sent.\n\n\nRIA\n\n\n\n\n\n\nCentral configuration service\n\n\nDescribed in chap. \nCentral configuration service\n\n\nRIA\n\n\n\n\n\n\nKill switch (v3.9-v3.11)\n\n\nService for centrally managing DigiDoc3 Client application\u2019s life cycle. The application periodically connects with the service to check if the application\u2019s version is still supported. If not, then the application cannot be used any longer and a newer version must be installed.\n\n\nRIA\n\n\n\n\n\n\nDigiDocService web service\n\n\nSOAP-based web service that is used by DigiDoc3 Client for signature creation with Mobile-ID. See also \nhttp://www.sk.ee/upload/files/DigiDocService_spec_eng.pdf\n.\n\n\nSK/SK\n\n\n\n\n\n\nLDAP directory\n\n\nDirectory of active certificates issued by SK (as the CA in Estonia). The directory is used by DigiDoc3 Crypto subcomponent for finding authentication certificate (and the respective public key) of the recipient of the encrypted document. See also \nhttps://sk.ee/en/repository/ldap/ldap-kataloogi-kasutamine/\n\n\nSK/SK\n\n\n\n\n\n\nTSL repository\n\n\nRepository for accessing the TSL (\nTrust Service status List\n) lists that can be used as a central source of trust anchor information during digital signature creation and validation processes. The European Commission\u2019s TSL list (\nhttps://ec.europa.eu/information_society/policy/esignature/trusted-list/tl-mp.xml\n) is used as the central TSL list (with references to national lists).\n\n\n-\n\n\n\n\n\n\nOCSP service\n\n\nRFC6960\n based OCSP service. Also offered by SK for Estonian and a number of foreign certificates (see \nwww.sk.ee\n).\n\n\n-\n\n\n\n\n\n\nLibdigidocpp\n\n\nDescribed in chap. \nSoftware libraries\n\n\nRIA/SK\n\n\n\n\n\n\nCDigiDoc\n\n\nDescribed in chap. \nSoftware libraries\n\n\nRIA/SK\n\n\n\n\n\n\nMinidriver\n\n\nUsed via CNG interface in Windows environment only. Described in chap. \nDrivers\n\n\nRIA/SK\n\n\n\n\n\n\n\n\nDigiDoc3 Client interfaces\n\n\nProvided:\n\n\n\n\nGraphical user interface\n - interface for handling ASiC-E/XAdES (i.e. BDOC), DDOC, CDOC documents, setting configuration parameters.\n\n\nUser: end-user\n\n\nAccessible with: GUI elements\n\n\n\n\n\n\nPIN dialog \u2013 for inserting PIN value during signature creation or decryption operations in all operating systems except of Windows\n\n\nUser: end-user\n\n\nAccessible with: GUI elements\n\n\n\n\n\n\n\n\nRequired:\n\n\n\n\nCentral configuration service interface\n (since v3.12)\n\n\nKill switch service interface\n (v3.9-v3.11)\n\n\nDigiDocService web service interface\n\n\nError reports repository interface\n\n\nLDAP directory interface\n\n\nInterfaces with base libraries:\n\n\nLibdigidocpp library\u2019s API\n \u2013 for handling documents in supported digital signature formats (BDOC and DDOC).\n\n\nExternal base libraries: Qt5, libldap, openssl\n\n\n\n\n\n\nInterfaces with cryptographic token\u2019s drivers (described in chap. \nDrivers\n)\n\n\nPKCS#11 interface\n\n\nCNG interface\n\n\n\n\n\n\n\n\n\n\nID-card utility\n\n\n\n\nFigure: Components of ID-card utility\n\n\nTable: Components of ID-card utility\n\n\n\n\n\n\n\n\nComponent\n\n\nDescription\n\n\nOwner/ Developer\n\n\n\n\n\n\n\n\n\n\nID-card utility\n\n\nEnd-user desktop application for managing ID-card\u2019s PIN/PUK codes replacement, certificates\u2019 renewal and other services. Code repository: \nhttps://github.com/open-eid/qesteidutil\n Wiki: \nhttps://github.com/open-eid/qesteidutil/wiki\n\n\nRIA/SK\n\n\n\n\n\n\nID-card utility\u2019s base libraries\n\n\nSee \nID-card utility's interfaces\n\n\n-\n\n\n\n\n\n\nID-card owner\u2019s photo repository\n\n\nRepository where the Estonian national ID-cards photos\u2019 are kept. ID-card\u2019s owner can download the photo after the user has been authenticated with PIN1 code.\n\n\nRIA\n\n\n\n\n\n\nError reports repository\n\n\nDescribed in chap. \nDigiDoc3 Client\n\n\nRIA\n\n\n\n\n\n\n@eesti.ee e-mail checking service\n\n\nService that enables to set the properties of e-mail address (@eesti.ee) that is provided for Estonian national ID-card owners by the state. The user must be authenticated with PIN1 code.\n\n\nRIA\n\n\n\n\n\n\nCertificate's renewal service (since v3.12)\n\n\nService for renewing certificates on the Estonian national ID-card and Digi-ID card.\n\n\nRIA\n\n\n\n\n\n\nM-ID checking service\n\n\nService for checking the status of Estonian national ID-card owner\u2019s Mobile-ID certificates. The user must be authenticated with PIN1 code.\n\n\nSK\n\n\n\n\n\n\nCentral configuration service\n\n\nDescribed in chap. \nCentral configuration service\n\n\nRIA\n\n\n\n\n\n\nUpdater, ID-updater Service\n\n\nDescribed in chap. \nUpdating mechanisms\n\n\nRIA/SK\n\n\n\n\n\n\n\n\n\n\nID-card utility's interfaces\n\n\nProvided:\n\n\n\n\nGraphical user interface\n \u2013 interface for handling card management operations and using the external services (listed under \u201cRequired interfaces\u201d).\n\n\nUser: end-user\n\n\nAccessible with: GUI elements\n\n\n\n\n\n\nPIN dialog \u2013 for inserting PIN/PUK value in all supported operating systems.\n\n\nUser: end-user\n\n\nAccessible with: GUI elements\n\n\n\n\n\n\n\n\nRequired:\n\n\n\n\nCentral configuration service interface\n (since v3.12)\n\n\nID-card owners\u2019 photo repository interface\n\n\nError reports repository interface\n\n\nCertificate's renewal service interface\n (since v3.12)\n\n\nEesti.ee e-mail checking service interface\n\n\nMobile-ID validity checking service interface\n\n\nInterfaces with base libraries: Qt5\n\n\nInterfaces with cryptographic token\u2019s drivers:\n\n\nSmartcardpp API (internal component)\n\n\n\n\n\n\n\n\n\nSoftware libraries\n\n\n\n\nFigure: Java software libraries and their components\n\n\n\n\nFigure: C/C++ software libraries and their components\n\n\n  \n\n\nFigure: .NET software libraries and components\np>\n\n\nTable: Software libraries and their components\n\n\n\n\n\n\n\n\nComponent\n\n\nDescription\n\n\nOwner/ Developer\n\n\n\n\n\n\n\n\n\n\nDigiDoc4j\n\n\nJava software library that enables handling documents in BDOC 2.1(XAdES/ASiC-E) and DIGIDOC-XML 1.3 formats. Documentation: \nhttp://open-eid.github.io/digidoc4j/\n Code repository: \nhttps://github.com/open-eid/digidoc4j\n\n\nRIA/SK\n\n\n\n\n\n\nDigiDoc4j utility program\n\n\nSmall command line application that implements the main functionality of DigiDoc4j library. Used for testing purposes. Can also be used as a source for sample client code for using DigiDoc4j. See also \nhttp://open-eid.github.io/digidoc4j/\n\n\nRIA/SK\n\n\n\n\n\n\nJDigiDoc\n\n\nJava software library that enables handling documents in BDOC 2.1 (XAdES/ASiC-E) and DIGIDOC-XML 1.3 formats and encryption/decryption in ENCDOC-XML 1.0 (CDOC). Documentation: \nhttp://id.ee/public/SK-JDD-PRG-GUIDE.pdf\n Code repository: \nhttps://github.com/open-eid/jdigidoc\n\n\nRIA/SK\n\n\n\n\n\n\nJDigiDoc utility program\n\n\nSmall command line application that implements the main functionality of JDigiDoc library. Used for testing purposes. Can also be used as a source for sample client code for using JDigiDoc. See also \nhttp://id.ee/public/SK-JDD-PRG-GUIDE.pdf\n.\n\n\nRIA/SK\n\n\n\n\n\n\nLibdigidocpp\n\n\nC++ software library that enables handling documents in BDOC 2.1 \u00a0(XAdES/ASiC-E) and DIGIDOC-XML 1.3 formats (via CDigiDoc base library). Wiki: \nhttps://github.com/open-eid/libdigidocpp/wiki\n Code repository: \nhttps://github.com/open-eid/libdigidocpp\n Documentation: \nhttp://open-eid.github.io/libdigidocpp/\n\n\nRIA/SK\n\n\n\n\n\n\nLibdigidocpp utility program\n\n\nSmall command line application (digidoc-tool.exe) that implements the main functionality of Libdigidocpp library. Used for testing purposes. Can also be used as a source for sample client code for using Libdigidocpp. See also \nhttp://open-eid.github.io/libdigidocpp/\n\n\nRIA/SK\n\n\n\n\n\n\nCDigiDoc\n\n\nSoftware library in C that enables handling digitally signed documents in DIGIDOC-XML 1.3 format and encryption/decryption in ENCDOC-XML 1.0 (CDOC). Documentation: \nhttp://id.ee/public/SK-CDD-PRG-GUIDE.pdf\n Code repository: \nhttps://github.com/open-eid/libdigidoc\n Wiki: \nhttps://github.com/open-eid/libdigidoc/wiki\n\n\nRIA/SK\n\n\n\n\n\n\nCDigiDoc utility program\n\n\nSmall command line application that implements the main functionality of CDigiDoc library. Used for testing purposes. Can also be used as a source for sample client code for using CDigiDoc. See also \nhttp://id.ee/public/SK-CDD-PRG-GUIDE.pdf\n\n\nRIA/SK\n\n\n\n\n\n\nNDigiDoc\n\n\nSoftware library in .NET enabling encryption/decryption in ENCDOC-XML 1.0 (CDOC). Documentation: \nhttp://id.ee/public/NDigiDoc.pdf\n Code repository: \nhttps://github.com/open-eid/ndigidoc\n\n\nSK/SK\n\n\n\n\n\n\nNDigiDoc utility program\n\n\nSmall command line application that implements the main functionality of NDigiDoc library. Used for testing purposes. Can also be used as a source for sample client code for using NDigiDoc. See also \nhttp://id.ee/public/NDigiDoc.pdf\n.\n\n\nSK/SK\n\n\n\n\n\n\nDigiDocCSharp\n\n\n.NET C# wrapper classes for using Libidigidocpp library\u2019s functionality in .NET environment. Created with Swig tool. See also \nhttps://github.com/open-eid/libdigidocpp/blob/master/examples/DigiDocCSharp/README.md\n\n\nRIA/SK\n\n\n\n\n\n\nTSL repository\n\n\nDescribed in chap. \nDigiDoc3 Client\n\n\n-\n\n\n\n\n\n\nTime-stamping service\n\n\nDescribed in chap. \nDigiDoc3 Client\n\n\n-\n\n\n\n\n\n\nOCSP service\n\n\nDescribed in chap. \nDigiDoc3 Client\n\n\n-\n\n\n\n\n\n\n\n\nDigiDoc4j library\u2019s interfaces\n\n\nProvided:\n\n\n\n\nDigiDoc4j API\n\n\nUser: DigiDoc4j utility program\n\n\nAccessible with: Java\n\n\n\n\n\n\n\n\nRequired:\n\n\n\n\nTSL repositories\u2019 interfaces\n\n\nTime-stamping service interface\n\n\nOCSP service interface\n\n\nInterfaces with base libraries:\n\n\nJDigiDoc library\u2019s API\n \u2013 for handling documents in DDOC format.\n\n\nOther base libraries: see \nhttp://open-eid.github.io/digidoc4j/\n .\n\n\n\n\n\n\nInterfaces with cryptographic token\u2019s drivers (described in chap. \nDrivers\n )\n\n\nPKCS#12 interface\n\n\n\n\n\n\n\n\nDigiDoc4j utility program\u2019s interfaces\n\n\nProvided:\n\n\n\n\nDigiDoc4j utility program\u2019s interface\n\n\nUser: server application, end-user application, end-user\n\n\nAccessible with: command line\n\n\n\n\n\n\n\n\nRequired:\n\n\n\n\nDigiDoc4j API\n\n\n\n\nJDigiDoc library\u2019s interfaces\n\n\nProvided:\n\n\n\n\nJDigiDoc API\n\n\nUser: JDigiDoc utility program, DigiDoc4j library\n\n\nAccessible with: Java\n\n\n\n\n\n\n\n\nRequired:\n\n\n\n\nOCSP service interface\n\n\nInterfaces with base libraries: see \nhttp://id.ee/public/SK-JDD-PRG-GUIDE.pdf\n for more information.\n\n\nInterfaces with cryptographic token\u2019s drivers (described in chap. \nDrivers\n ):\n\n\nPKCS#11 interface\n\n\nCNG interface\n\n\nPKCS#12 interface\n\n\n\n\n\n\n\n\nJDigiDoc utility program\u2019s interfaces\n\n\nProvided:\n\n\n\n\nJDigiDoc utility program\u2019s interface\n\n\nUser: server application, end-user application, end-user\n\n\nAccessible with: command line\n\n\n\n\n\n\n\n\nRequired:\n\n\n\n\nJDigiDoc API: see chap. \nJDigiDoc library\u2019s interfaces\n\n\n\n\nLibdigidocpp library\u2019s interfaces\n\n\nProvided:\n\n\n\n\nLibdigidocpp API\n\n\nUser: DigiDoc3 Client, Libdigidocpp utility program, DigiDocCSharp .NET wrapper classes\n\n\nAccessible with: C++\n\n\n\n\n\n\n\n\nRequired:\n\n\n\n\nTSL repositories\u2019 interfaces\n\n\nTime-stamping service interface\n\n\nOCSP service interface\n\n\nInterfaces with base libraries:\n\n\nCDigiDoc library\u2019s API \u2013 for handling documents in DDOC format. See chap. \nCDigiDoc library\u2019s interfaces\n\n\nOther base libraries: OpenSSL, xerces-c, xalan-c, codesynthesis-xsd, libxml-security-c. See also \nhttp://open-eid.github.io/libdigidocpp/\n\n\n\n\n\n\nInterfaces with cryptographic token\u2019s drivers (described in chap. \nDrivers\n )\n\n\nPKCS#11 interface\n\n\nCNG interface\n\n\nPKCS#12 interface\n\n\n\n\n\n\n\n\nLibdigidocpp utility program\u2019s interfaces\n\n\nProvided:\n\n\n\n\nLibdigidocpp utility program\u2019s interface\n\n\nUser: server application, end-user application, end-user\n\n\nAccessible with: command line\n\n\n\n\n\n\n\n\nRequired:\n\n\n\n\nLibdigidocpp API: see chap. \nLibdigidocpp library\u2019s interfaces\n\n\n\n\nCDigiDoc library\u2019s interfaces\n\n\nProvided:\n\n\n\n\nCDigiDoc API\n\n\nUser: Libdigidocpp library, CDigiDoc utility program\n\n\nAccessible with: C\n\n\n\n\n\n\n\n\nRequired:\n\n\n\n\nOCSP service interface\n\n\nInterfaces with base libraries: OpenSSL, libxml2. See also \nhttp://id.ee/index.php?id=35782\n.\n\n\nInterfaces with cryptographic token\u2019s drivers (described in chap. \nDrivers\n )\n\n\nPKCS#11 interface\n\n\nCNG interface\n\n\nPKCS#12 interface\n\n\n\n\n\n\n\n\nCDigiDoc utility program\u2019s interfaces\n\n\nProvided:\n\n\n\n\nCDigiDoc utility program\u2019s interface\n\n\nUser: server application, end-user application, end-user\n\n\nAccessible with: command line/console\n\n\n\n\n\n\n\n\nRequired:\n\n\n\n\nCDigiDoc API: see chap. \nCDigiDoc library\u2019s interfaces\n\n\n\n\nNDigiDoc library\u2019s interfaces\n\n\nProvided:\n\n\n\n\nNDigiDoc API\n\n\nUser: server application, end-user application; NDigiDoc utility program\n\n\nAccessible with: .NET\n\n\n\n\n\n\n\n\nRequired:\n\n\n\n\nInterfaces with base libraries: see \nhttp://id.ee/public/NDigiDoc.pdf\n for more information.\n\n\nInterfaces with cryptographic token\u2019s drivers (described in chap. \nDrivers\n )\n\n\nPKCS#12 interface\n\n\n\n\n\n\n\n\nNDigiDoc utility program\u2019s interfaces\n\n\nProvided:\n\n\n\n\nNDigiDoc utility program\u2019s interface\n\n\nUser: server application, end-user application, end-user\n\n\nAccessible with: command line/console \u00a0\u00a0\n\n\n\n\n\n\n\n\nRequired:\n\n\n\n\nNDigiDoc API: see chap. \nNDigiDoc library\u2019s interfaces\n\n\n\n\n\n\nWeb components\n\n\nWeb signing components\n\n\nThe web signing component diagrams describe components that are needed for signature creation in web applications with eID cards.\n\n\n  \n\n\nFigure: Components for signature creation in web environment\n\n\nTable: Components for signing in web environment\n\n\n\n\n\n\n\n\nComponent\n\n\nDescription\n\n\nOwner/ Developer\n\n\n\n\n\n\n\n\n\n\nhwcrypto.js\n\n\nJavaScript library that enables communication with the browser signing modules (plug-in or extension) of the different web browsers. Wiki: \nhttps://github.com/open-eid/hwcrypto.js/wiki\n Code repository: \nhttps://github.com/open-eid/hwcrypto.js\n\n\nRIA/SK\n\n\n\n\n\n\nA web application\n\n\nA web application that implements signature creation with an eID-card in browser environment.\n\n\n-\n\n\n\n\n\n\nEstEID Firefox plug-in\n\n\nBrowser signing module (NPAPI-based plug-in) that is used in Firefox (supported in Windows and Linux) and Safari (supported in Mac OS) browsers. The plug-in enables data exchange with the cryptographic token\u2019s driver that is used for signing. In Windows environment, the driver that is implementing CNG/CAPI interface is used, along with the operating system\u2019s native PIN insertion and certificate selection dialogs. Otherwise, PKCS#11 driver is used. Code repository: \nhttps://github.com/open-eid/browser-token-signing\n Wiki: \nhttps://github.com/open-eid/browser-token-signing/wiki\n\n\nRIA/SK\n\n\n\n\n\n\nEstEIDPluginBHO\n\n\nBrowser signing module (BHO-based plug-in) that is used in Internet explorer browser (supported in Windows operating system). The plug-in enables data exchange with the cryptographic token\u2019s driver that is used for signing. Code repository: \nhttps://github.com/open-eid/browser-token-signing\n Wiki: \nhttps://github.com/open-eid/browser-token-signing/wiki\n\n\nRIA/SK\n\n\n\n\n\n\nchrome-token-signing\n\n\nComprises two subcomponents: browser extension component and native OSX/Linux/Windows component that implements Native Messaging API (JSON). The browser extension enables data exchange with the native component that in turn interacts with the cryptographic token\u2019s driver for signing. Code repository: \nhttps://github.com/open-eid/chrome-token-signing\n Wiki: \nhttps://github.com/open-eid/chrome-token-signing/wiki\n\n\nRIA/SK\n\n\n\n\n\n\nMinidriver\n\n\nUsed via CNG interface in Windows environment only. Described in chap. \nDrivers\n\n\nRIA/SK\n\n\n\n\n\n\n\n\nHwcrypto.js library\u2019s interfaces\n\n\nProvided:\n\n\n\n\nhwcrypto.js library\u2019s API\n\n\nUser: a web application in browser environment\n\n\nAccessible with: JavaScript\n\n\n\n\n\n\n\n\nRequired:\n\n\n\n\nInterfaces with browser signing modules:\n\n\nEstEID Firefox plug-in\u2019s interfaces\n\n\nEstEIDPluginBHO plug-in\u2019s interfaces\n\n\nChrome-token-signing extension\u2019s interfaces\n\n\n\n\n\n\n\n\nEstEID Firefox plug-in\u2019s interfaces\n\n\nProvided:\n\n\n\n\nEstEID Firefox plug-in\u2019s API\n\n\nUser: a web application in browser environment, hwcrypto.js library\n\n\nAccessible with: C\n\n\n\n\n\n\nPIN dialog \u2013 for inserting PIN2 value during signature creation in all operating systems except of Windows\n\n\nUser: end-user\n\n\nAccessible with: GUI elements\n\n\n\n\n\n\nCertificate selection dialog\n\n\nUser: end-user\n\n\nAccessible with: GUI elements\n\n\n\n\n\n\n\n\nRequired:\n\n\n\n\nInterfaces with cryptographic token\u2019s drivers (described in chap. \nDrivers\n)\n\n\nPKCS#11 interface\n\n\nCNG interface\n\n\n\n\n\n\n\n\nEstEIDPluginBHO plug-in\u2019s interfaces\n\n\nProvided:\n\n\n\n\nEstEIDPluginBHO plug-in\u2019s API\n\n\nUser: a web application in browser environment, hwcrypto.js library\n\n\nAccessible with: C++\n\n\n\n\n\n\n\n\nRequired:\n\n\n\n\n\n\nInterfaces with cryptographic token\u2019s drivers (described in chap. \nDrivers\n)\n\n\n\n\n\n\nCNG/CAPI interface\n\n\n\n\n\n\nChrome-token-signing extension\u2019s interfaces\n\n\nProvided:\n\n\n\n\nChrome-token-signing extension\u2019s API\n\n\nUser: a web application in browser environment, hwcrypto.js library\n\n\nAccessible with: C++\n\n\n\n\n\n\nPIN dialog \u2013 for inserting PIN2 value during signature creation\n\n\nUser: end-user\n\n\nAccessible with: GUI elements\n\n\n\n\n\n\nCertificate selection dialog\n\n\nUser: end-user\n\n\nAccessible with: GUI elements\n\n\n\n\n\n\n\n\nRequired:\n*   Interfaces with cryptographic token\u2019s drivers (described in chap. \nDrivers\n) \u00a0\n    *   PKCS#11 interface\n\n\nWeb authentication components\n\n\nAuthentication in web browsers is done with the browsers\u2019 and operating systems\u2019 native components. In case of authenticating in Firefox browser then Firefox pkcs11-module-loader JavaScript component is used to load the OpenSC PKCS#11 driver by the browser.\n\n\n  \n\n\nFigure: Web authentication components\n\n\nTable: Web authentication components\n\n\n\n\n\n\n\n\nComponent\n\n\nDescription\n\n\nOwner/ Developer\n\n\n\n\n\n\n\n\n\n\npkcs11-loader.js\n\n\nA JavaScript component that is used to load the OpenSC PKCS#11 driver to the Firefox browser\u2019s cryptographic devices list during each initialization of the browser. Needed during authentication process with eID-card in Firefox browser in all supported operating systems. Code repository: \nhttps://github.com/open-eid/firefox-pkcs11-loader\n Wiki: \nhttps://github.com/open-eid/firefox-pkcs11-loader/wiki\n\n\nRIA/SK\n\n\n\n\n\n\nOSX native certificate selection and PIN dialog\n\n\nPIN dialog and certificate selection windows provided by the operating system\u2019s native components.\n\n\n-\n\n\n\n\n\n\nMinidriver\n\n\nDescribed in chap. \nDrivers\n\n\nRIA/SK\n\n\n\n\n\n\n\n\n\n\nDrivers\n\n\n\n\nFigure: Cryptographic tokens\u2019 drivers\n\n\nTable: Cryptographic token driver components\n\n\n\n\n\n\n\n\nComponent\n\n\nDescription\n\n\nOwner/ Developer\n\n\n\n\n\n\n\n\n\n\nEstEID PKCS#11 driver\n\n\nA driver for accessing eID-cards. Connects with the card via the operating system\u2019s native PC/SC interface. Used as a default driver for signature creation with eID card in browser environment in case of OSX platform. Used as a default driver for authentication with eID card in browser environment in case of Firefox browser in OSX platform. Code repository: \nhttps://github.com/open-eid/esteid-pkcs11\n Wiki: \nhttps://github.com/open-eid/esteid-pkcs11/wiki\n\n\nRIA/SK\n\n\n\n\n\n\nOpenSC PKCS#11 driver\n\n\nA driver for accessing eID-cards. Connects with the card via the operating system\u2019s native PC/SC interface. Used as a default driver for authentication with eID card in browser environment in case of Windows and Linux platforms. Used as a default driver for signature creation in web browser environment in case of Linux platform. Wiki: \nhttps://github.com/OpenSC/OpenSC/wiki\n\n\n-\n\n\n\n\n\n\nSmartcardpp\n\n\neID card driver\u2019s helper component. Inner component. Code repository: \nhttps://github.com/open-eid/smartcardpp\n Wiki: \nhttps://github.com/open-eid/smartcardpp/wiki\n\n\nRIA/SK\n\n\n\n\n\n\nMinidriver\n\n\nUsed as a default driver for accessing Estonian eID-cards via CNG interface for signature creation in web browser environment in case of Windows platform. Used as a default driver for authentication with eID card in Chrome and Internet Explorer browsers in case of Windows platform. Code repository: \nhttps://github.com/open-eid/minidriver\n Wiki: \nhttps://github.com/open-eid/minidriver/wiki\n\n\nRIA/SK\n\n\n\n\n\n\nATR Filter\n\n\nBase component for Minidriver (see \nhttp://support.microsoft.com/kb/981665\n for more information).\n\n\n-\n\n\n\n\n\n\nEsteid Tokend\n\n\nA driver for accessing eID-cards. Connects with the card via the operating system\u2019s native PC/SC interface. Used as a default driver for authentication with eID card in browser environment in case OSX platform. Code repository: \nhttps://github.com/open-eid/esteid-tokend\n Wiki: \nhttps://github.com/open-eid/esteid-tokend/wiki\n\n\nRIA/SK\n\n\n\n\n\n\nPKCS#12 implementation via base library\n\n\nAn implementation of PKCS#12 interface by the component\u2019s base libraries.\n\n\n-\n\n\n\n\n\n\n\n\nPKCS#11 driver interfaces\n\n\nComponents:\n\n\n\n\nEstEID PKCS#11 driver\n\n\nOpenSC PKCS#11 driver\n\n\n\n\nProvided:\n\n\n\n\nPKCS#11 API\n\n\nUser: a browser signing module, software library\n\n\nAccessible with: C++\n\n\nDocumentation: \n\n\nPKCS#11 API: \nhttp://www.emc.com/emc-plus/rsa-labs/standards-initiatives/pkcs-11-cryptographic-token-interface-standard.htm\n\n\nsource code for the list of implemented functions\n\n\n\n\n\n\n\n\n\n\n\n\nRequired:\n\n\n\n\nPC/SC: see chap. \nPC/SC driver\n\n\n\n\nMinidriver interfaces\n\n\nProvided:\n\n\n\n\n\n\nCNG/Minidriver API\n\n\n\n\nUser: a browser signing module, software library\n\n\nAccessible with: C/C++\n\n\nDocumentation:\n\n\nCNG: \nhttp://msdn.microsoft.com/en-us/library/windows/desktop/aa376210(v=vs.85).aspx\n,\n\n\nMinidriver API: \nhttp://msdn.microsoft.com/en-us/library/windows/hardware/dn631754(v=vs.85).aspx\n\n\nsource code for the list of implemented functions\n\n\n\n\n\n\n\n\n\n\n\n\nCAPI/Minidriver API\n\n\n\n\nUser: a browser signing module, software library\n\n\nAccessible with: C/C++\n\n\nDocumentation:\n\n\nCAPI:\u00a0 \nhttp://msdn.microsoft.com/en-us/library/aa380256.aspx\n\n\nMinidriver API: \nhttp://msdn.microsoft.com/en-us/library/windows/hardware/dn631754(v=vs.85).aspx\n\n\nsource code for the list of implemented functions\n\n\n\n\n\n\n\n\n\n\n\n\nRequired:\n\n\n\n\nPC/SC: see chap. \nPC/SC driver\n\n\n\n\nPKCS#12 implementation via base library\n\n\nProvided:\n\n\n\n\nPKCS#12 interface\n\n\nUser: a software library\n\n\nAccessible with: PKCS#12 API\n\n\nDocumentation: see documentation of the respective component\u2019s appropriate base library\n\n\n\n\n\n\n\n\nTokend driver interfaces\n\n\nComponents implementing the interface:\n\n\n\n\nEstEID Tokend driver\n\n\n\n\nProvided:\n\n\n\n\nCDSA\n\n\nUser: software library\n\n\nAccessible with: C++\n\n\nDocumentation: see \nhttps://developer.apple.com/library/mac/documentation/security/conceptual/cryptoservices/CDSA/CDSA.html\n\n\n\n\n\n\n\n\nRequired:\n\n\n\n\nPC/SC: see chap. \nPC/SC driver\n\n\n\n\n\n\nPC/SC driver interfaces\n\n\nProvided:\n\n\n\n\nPC/SC interface\n\n\nUser: eID-card\u2019s driver\n\n\nAccessible with: PC/SC API\n\n\nDocumentation: see \nhttp://www.pcscworkgroup.com/specifications/overview.php\n\n\n\n\n\n\n\n\nRequired: not in the scope of this document.\n\n\n\n\nUpdating mechanisms\n\n\nThe following chapter describes automatic updating mechanisms of different ID-software desktop applications. Several combinations of central software update checking and distribution environments are used depending on the end-user\u2019s operating system.\n\n\n\n\nWindows updating mechanism\n\n\n\n\nFigure: Updating mechanisms in Windows\n\n\nTable: Updating mechanisms in Windows\n\n\n\n\n\n\n\n\nComponent\n\n\nDescription\n\n\nOwner/ Developer\n\n\n\n\n\n\n\n\n\n\nID-updater\n\n\nService that is periodically checks if newer versions of related ID-software components are available for download, initiates the download and installation if necessary.\n\n\nRIA/SK\n\n\n\n\n\n\nMS Update\n\n\nMicrosoft Update \u2013 see Microsoft\u2019s documentation for more information.\n\n\n-\n\n\n\n\n\n\nChrome Web Store\n\n\nSee \nhttps://chrome.google.com/webstore/detail/token-signing/ckjefchnfjhjfedoccjbhjpbncimppeg\n\n\n-\n\n\n\n\n\n\n\n\nOS X updating mechanism\n\n\n\n\nFigure: Updating mechanisms in OSX\n\n\nTable: Updating mechanisms in OSX\n\n\n\n\n\n\n\n\nComponent\n\n\nDescription\n\n\nOwner/ Developer\n\n\n\n\n\n\n\n\n\n\nID-updater\n\n\nDescribed in chap. \nWindows updating mechanism\n\n\nRIA/SK\n\n\n\n\n\n\nApple App Store\n\n\nSee Apple App Store documentation.\n\n\n-\n\n\n\n\n\n\nChrome Web Store**\n\n\nSee \nhttps://chrome.google.com/webstore/detail/token-signing/ckjefchnfjhjfedoccjbhjpbncimppeg\n\n\n-\n\n\n\n\n\n\n\n\nLinux updating mechanism\n\n\n\n\nFigure: Updating mechanism in Linux\n\n\nTable: Updating mechanisms in Linux\n\n\n\n\n\n\n\n\nComponent\n\n\nDescription\n\n\nOwner/ Developer\n\n\n\n\n\n\n\n\n\n\nUbuntu package updates\n\n\nManaged and maintained by SK. The binary packages are released for installation and updating to \nhttps://installer.id.ee/media/ubuntu/\n repository.\n\n\nRIA/SK\n\n\n\n\n\n\nPackages updates for other distros\n\n\nManaged by the open-source community. Packages are built, added and updated in Estobuntu and Fedora distributions by the package maintainers.\n\n\n-\n\n\n\n\n\n\nChrome Web Store\n\n\nSee \nhttps://chrome.google.com/webstore/detail/token-signing/ckjefchnfjhjfedoccjbhjpbncimppeg\n\n\n-\n\n\n\n\n\n\n\n\n\n\nCentral configuration service\n\n\nThe central configuration service's purpose is to enable on-line and central management of ID-software components configuration settings.\n\n\n \n\n\nFigure: Central configuration service's client and server components\n\n\nTable: Central configuration service's components\n\n\n\n\n\n\n\n\nComponent\n\n\nDescription\n\n\nOwner/ Developer\n\n\n\n\n\n\n\n\n\n\nID-card Utility\n\n\nID-card Utility requests configuration data from the central configuration client component. Described in chap. \nID-card Utility\n\n\nRIA/SK\n\n\n\n\n\n\nDigiDoc3 Client\n\n\nDigiDoc3 Client requests configuration data from the central configuration client component. Described in chap. \nDigiDoc3 Client\n\n\nRIA/SK\n\n\n\n\n\n\nCentral configuration client\n\n\nCentral Configuration Client component manages the configuration file validation and updating processes, returns the validated configuration data to the Requesting Application (DigiDoc3 Client or Utility program) and if necessary, updates the data from Central Configuration Server\n\n\nRIA/SK\n\n\n\n\n\n\nCentral configuration service\n\n\nCentral Configuration Server component provides configuration data on-line to the Central Configuration Client component\n\n\nRIA\n\n\n\n\n\n\nconfig.json\n\n\nThe central configuration file is named config.json, the file is in JSON format. The configuration file is signed\n\n\nRIA/SK\n\n\n\n\n\n\nconfig.rsa\n\n\nStores the central configuration file's signature value.\n\n\nRIA/SK\n\n\n\n\n\n\nconfig.pub\n\n\nPublic key used for validating the central configuration file's signature value.\n\n\nRIA/SK\n\n\n\n\n\n\nQT-commons\n\n\nContains common code of DigiDoc3 Client and ID-card Utility program.\n\n\nRIA/SK\n\n\n\n\n\n\nLibdigidocpp\n\n\nDigiDoc3 Client's base library, also uses the central configuration file's settings. Described in chap. \nSoftware libraries\n\n\nRIA/SK\n\n\n\n\n\n\n\n\n\n\nCentral configuration client component's interfaces\n\n\nProvided:\n\n\n\n\nCentral Configuration Client API (qt-common component)\n\n\nUser: DigiDoc3 Client, ID-card Utility\n\n\nAccessible with: C++\n\n\n\n\n\n\n\n\nRequired:\n\n\n\n\nCentral configuration file config.json from the central configuration server\n\n\nCentral configuration file config.json from the local file system (or the local installation package)\n\n\nCentral configuration file's signature config.rsa from the central configuration server\n\n\nCentral configuration file's signature config.rsa from the local file system (or the local installation package)\n\n\nClient operating system's registry/environment variables\n\n\nLastCheck entry\n\n\n\n\n\n\nBase libraries:\n\n\nQT framework\n\n\nOpenSSL\n\n\n\n\n\n\n\n\n\n\nCentral configuration server component's interfaces\n\n\nProvided:\n\n\n\n\nCentral configuration file config.json\n\n\nUsed by: central configuration client component\n\n\nAccessible from: \nhttps://id.eesti.ee/config.json\n\n\n\n\n\n\nCentral configuration file's signature file config.rsa\n\n\nUsed by: central configuration client component\n\n\nAccessible from: \nhttps://id.eesti.ee/config.rsa\n\n\n\n\n\n\nCentral configuration file's public key file config.pub\n\n\nUsed by: central configuration client component\n\n\nAccessible from: \nhttps://id.eesti.ee/config.pub\n \n\n\n\n\n\n\n\n\n\n\nInterfaces with external services\n\n\nThe following chapter describes interfaces that different ID-software components may have with external services. Relatsionships with the external services are depicted in different ID-software component models above.\n\n\nCentral configuration service's interface\n\n\n\n\nCentral configuration service is described in a separate chapter, see \nCentral configuration service\n. \n\n\n\n\n\n\nID-updater interface\n\n\n\n\nUser: DigiDoc3 Client\n\n\nAccessible with: HTTPS protocol\n\n\nAccessible from:\n\n\nWindows: \nhttps://installer.id.ee/media/win/products.xml\n,\n\n\nOSX: \nhttps://installer.id.ee/media/osx/products.xml\n,\n\n\nLinux: \nhttps://installer.id.ee/media/ubuntu/pool/main/\n\u00a0\n\n\n\n\n\n\n\n\nKill switch service interface (v3.9-v3.11)\n\n\n\n\nUser: DigiDoc3 Client\n\n\nAccessible with: XML file sent over HTTPS protocol\n\n\nAccessible from: \nhttps://installer.id.ee/media/killswitch/products.xml\n\n\n\n\nDigiDocService web service interface\n\n\n\n\nUser: DigiDoc3 Client\n\n\nAccessible with: SOAP 1.0-encoded over HTTPS\n\n\nAccessible from: \nhttps://digidocservice.sk.ee\n\n\nDocumentation: \nhttp://www.sk.ee/upload/files/DigiDocService_spec_eng.pdf\n\n\n\n\nError reports repository interface\n\n\n\n\nUser: DigiDoc3 Client, ID-utility\n\n\nAccessible with: HTTPS protocol\n\n\nAccessible from: \nhttps://cr.eesti.ee\n\n\n\n\nLDAP directory interface\n\n\n\n\nUser: DigiDoc3 Client\n\n\nAccessible with: LDAP protocol\n\n\nAccessible from: ldap.sk.ee:389\n\n\nDocumentation: \nhttps://sk.ee/en/repository/ldap/ldap-kataloogi-kasutamine/\n\n\n\n\nTSL repositories\u2019 interfaces\n\n\n\n\nUser: Libdigidocpp, DigiDoc4j\n\n\nAccessible with: HTTPS protocol\n\n\n\n\nAccessible from:\n\n\n\n\nEuropean Commission\u2019s master list: \nhttps://ec.europa.eu/information_society/policy/esignature/trusted-list/tl-mp.xml\n\n\nNational TSL URLs in the European Commission\u2019s TSL, e,g, Estonian TSL: \nhttp://sr.riik.ee/tsl/estonian-tsl.xml\n\n\n\n\n\n\n\n\nDocumentation: \nhttp://www.etsi.org/deliver/etsi_ts/119600_119699/119612/01.02.01_60/ts_119612v010201p.pdf\n\n\n\n\n\n\nTime-stamping service interface\n\n\n\n\nUser: Libdigidocpp , DigiDoc4j\n\n\nAccessible with: HTTPS protocol\n\n\nAccessible from:\n\n\nSK\u2019s time-stamping service \nhttp://demo.sk.ee/tsa/\n\n\nDocumentation: \nRFC3161\n\n\n\n\n\n\n\n\nOCSP service interface\n\n\n\n\nUser: DigiDoc4j, JDigiDoc, Libdigidocpp, CDigiDoc software libraries; DigiDocService web service\n\n\nAccessible with: HTTPS protocol\n\n\n\n\nAccessible from:\n\n\n\n\nSK\u2019s OCSP service for SK issued certificates: \nhttp://ocsp.sk.ee/\n\n\nSK\u2019s Proxy OCSP service for international use: \nhttp://ocsp.sk.ee/_proxy\n\n\nSK\u2019s test OCSP service: \nhttp://demo.sk.ee/ocsp\n\n\n\n\n\n\n\n\nDocumentation: \nRFC6960\n\n\n\n\n\n\nID-card owners\u2019 photo repository interface\n\n\n\n\nUser: ID-card utility program\n\n\nAccessible with: HTTPS protocol\n\n\nAccessible from: \nhttps://sisene.www.eesti.ee/idportaal/portaal.idpilt\n\n\n\n\nEesti.ee e-mail checking service interface\n\n\n\n\nUser: ID-card utility program\n\n\nAccessible with: HTTPS\n\n\nAccessible from: \nhttps://sisene.www.eesti.ee/idportaal/postisysteem.naita_suunamised\n\n\n\n\nMobile-ID validity checking service interface\n\n\n\n\nUser: ID-card utility program\n\n\nAccessible with: HTTPS\n\n\nAccessible from: \nhttps://id.sk.ee/MIDInfoWS/\n\n\n\n\nCertificate's renewal service interface (since v3.12.x)\n\n\n\n\nUser: ID-card utility program\n\n\nAccessible with: HTTP\n\n\nAccessible from: to be specified. \n\n\n\n\n\n\nDeployment model\n\n\nThe following subchapters describe physical deployment of ID-software components in collaboration with external components that were depicted in chap. \nComponent model\n in case of the most common use cases.\n\n\n\n\nSigning in web browser\n\n\n \n\n\nFigure: Signing in web browser via a web application\n\n\nAdditional notes:\n\n\n\n\nA DigiDoc software library (i.e. DigiDoc4j, JDigiDoc, Libdigidocpp or CDigiDoc library) and DigiDocService web service are optional and can be used for creating a DDOC or BDOC container and adding the created signature value to the container.\n\n\nLong term validation data is added to the DDOC/BDOC signature by obtaining OCSP confirmation and optionally a time-stamp\n\n\nDigiDocService is required in order to sign with Mobile-ID.\n\n\nSignature value is calculated either in the Mobile-ID SIM card or eID-card\u2019s chip.s\n\n\nWhen signing with eID smartcard then the browser signing module is necessary for enabling communication with the smart card connected to the user\u2019s system. Hwcrypto.js library offers a single API for supporting signing modules of all the supported browsers.\u00a0\n\n\nOptionally, trust anchor data is retrieved from TSL lists \u2013 the European Commission\u2019s central TSL and national TSL\u2019s of the EU member states.\n\n\n\n\n\n\nSigning with DigiDoc3 Client\n\n\n\n\nFigure: Deployment of components during signature creation with DigiDoc3 Client\n\n\nAdditional notes:\n\n\n\n\nDigiDoc3 Client is used for creating the DDOC or BDOC (XAdES/ASiC-E) container and adding the signature value to the container.\n\n\nLong term validation data is added to the DDOC/BDOC signature by obtaining OCSP confirmation and optionally a time-stamp\n\n\nDigiDocService is required in order to sign with Mobile-ID.\n\n\nSignature value is calculated either in the Mobile-ID SIM card or ID-card\u2019s chip.\n\n\nTrust anchor data is retrieved from TSL lists \u2013 the European Commission\u2019s central TSL and national TSL\u2019s of the EU member states.",
            "title": "Home"
        },
        {
            "location": "/#architecture-of-id-software",
            "text": "Document version: 0.6 \nSoftware version: 3.12 \nLast updated: 15.02.2016",
            "title": "ARCHITECTURE OF ID-SOFTWARE"
        },
        {
            "location": "/#introduction",
            "text": "The purpose of this document is to describe the architecture of ID-software.   ID-software  is a collection of software components offering support for PKI-based functionality, i.e. operations with different cryptographic tokens (e.g. eID cards), handling digitally signed documents, file encryption/decryption and signing and authentication in web environment. The ID-software comprises end-user applications, software libraries, web components, drivers for communicating with the cryptographic tokens and other complementary components.    This document covers description of ID-software and its components, their deployment in different environments, provided and required interfaces. The document does not include components that have reached the end of their support nor the components that have not yet been released.    The document is based on the latest released state of the ID-software components. At the time of writing, the latest released version of ID-software is  version 3.12 . Latest version numbers of the various ID-software components are provided at  http://www.id.ee/?lang=en&id=36798 .  The document is targeted for:   Owners/managers of the software;  Contractors;  Contributors interested in developing ad-hoc solutions;  Integrators/software developers interested in integrating the software with third-party information systems;  International audience \u2013 contributors/integrators from countries other than Estonia who wish to use the software internationally and/or contribute in its development.",
            "title": "Introduction"
        },
        {
            "location": "/#background",
            "text": "The main owner/manager of the ID-software is Estonian Information System Authority (RIA,  https://www.ria.ee/en/ ). \nMain contractor for developing the software is AS Sertifitseerimiskeskus (SK,  https://sk.ee/en ). In case of a few of the components, SK is also the owner.    Development of ID-software has been mainly done in Estonia, however, the ID-software is released for international usage. \nThe software is distributed open-source (mainly under LGPL/BSD licence) and is accessible from the following locations:   GitHub repository for the source code, wiki documentation, beta and (optionally) production versions of binary packages:  https://github.com/open-eid .  Release repository for production versions of binaries:  https://installer.id.ee/   ID-software components can be logically divided in the following groups:   Desktop applications  for end-users;  Software libraries  for integrators/software developers to integrate the libraries\u2019 functionality with third-party information systems/applications;  Web components  for integrators/software developers to add the signature creation and authentication functionality in web environment to third-party web applications;  Drivers  for communication with the cryptographic tokens that conduct the PKI operations;  Other (supportive) components  for packaging, installation, updating and centrally handling changes of the configuration settings in software.   The following table maps the main ID-software components, their owner/developer (i.e. the main contractor) and the functionality they offer.  Table: Mapping of ID-software components and functions     \n\nComponent  \n\nFunction  \n\nOwner/  \nDeveloper  \n\nLicence    \n\nHandling BDOC documents  Handling DDOC documents  \n\nHandling CDOC documents  \n\nCalculating RSA signature  \n\nCard management operations  \n\nAuthentication    \n\nDesktop applications  \n\nDigiDoc3 Client (incl. DigiDoc3 Crypto)  \n\nyes (1)  yes - validation only (1)  \n\nyes  \n\n-  \n\n-  \n\n-  \n\nRIA/SK  \n\nLGPL    \n\nID-card utility  \n\n-  -  \n\n-  \n\n-  \n\nyes (1)  \n\n-  \n\nRIA/SK  \n\nLGPL    \n\nSoftware libraries  \n\nJDigiDoc (Java)  \n\nyes (2)  yes  \n\nyes  \n\nyes (1)  \n\n-  \n\n-  \n\nRIA/SK  \n\nLGPL    \n\nDigiDoc4j (Java)  \n\nyes  yes (1)  \n\n-  \n\nyes (1)  \n\n-  \n\n-  \n\nRIA/SK  \n\nLGPL    \n\nLibdigidocpp (C++)  \n\nyes  yes (1)  \n\n-  \n\nyes (1)  \n\n-  \n\n-  \n\nRIA/SK  \n\nLGPL    \n\nCDigiDoc (C)  \n\n-  yes  \n\nyes  \n\nyes (1)  \n\n-  \n\n-  \n\nRIA/SK  \n\nLGPL    \n\nNDigiDoc (.NET)  \n\n-  -  \n\nyes  \n\n-  \n\n-  \n\n-  \n\nSK/SK  \n\nBSD3    \n\nWeb components  \n\nBrowser signing modules  \n\n-  -  \n\n-  \n\nyes (1)  \n\n-  \n-  \nRIA/SK  \nLGPL    \nhwcrypto.js (JavaScript)  \n-  -  \n-  \nyes (1)  \n-  \n-  \nRIA/SK  \nMIT    \npkcs11-module-loader  \n-  -  \n-  \n-  \n-  \nyes (3)  \nRIA/SK  \nLGPL    \nDriver components  \nMinidriver  \n-  -  \n-  \nyes (1)  \n-  \nyes (1)  \nRIA/SK  \nLGPL/BSD3    \nEstEID-pkcs11  \n-  -  \n-  \nyes (1)  \n-  \nyes (1)  \nRIA/SK  \n-    \nEstEID-tokend  \n-  -  \n-  \nyes (1)  \n-  \nyes (1)  \nRIA/SK  \nAPSL / LGPL    \nSmartcardpp  \n-  -  \n-  \nyes (1)  \nyes (1)  \nyes (1)  \nRIA/SK  \nLGPL/BSD3     Remarks:  (1) - The functionality is provided via base components. \n(2) - Only BDOC with time-marks is supported (TM profile). Additional information is provided in the component's documentation. \n(3) - The component is used only once for setting the proper parameters for authentication in Firefox browser.    The main functions offered by ID-software are described in the following table.  Table: Functions offered by ID-software     Function  Description      Handling BDOC documents  Handling documents in  BDOC 2.1  (XAdES/ASiC-E) digital signature format that is a profile of  ETSI XAdES  (XML Advanced Electronic Signature) and  ETSI ASiC  formats. More information on the formats\u2019 life cycle can be found from  http://www.id.ee/?lang=en&id=34336  .    Handling DDOC documents  Handling documents in  DIGIDOC-XML 1.3 (DDOC)  digital signature format that is a profile of  ETSI XAdES  (XML Advanced Electronic Signature) format. More information on the formats\u2019 life cycle can be found from  http://www.id.ee/?lang=en&id=34336    Calculating RSA signature  Calculating the RSA signature value in browser or desktop/server environment. The operation involves connecting with the signature token\u2019s driver, sending the data to be signed and receiving digital signature value calculated with the token owner\u2019s RSA private key. The following cryptographic tokens are supported: hardware-based tokens (e.g. PKCS#11-based eID cards, USB cryptostick and Mobile-ID); software-based tokens (e.g. PKCS#12 software token)    Handling CDOC documents  Encrypting and decrypting documents in  ENCDOC-XML 1.0 (CDOC)  format.    Card management operations  Renewal of the certificates on the card, PIN/PUK management, reading personal data file.    Authentication  Authentication with ID-card. The operation is generally done via native operating system/browser components. In case of Estonian ID-cards and Firefox browser, a PKCS#11 module loader script is used for setting the proper parameters for authentication in Firefox browser.",
            "title": "Background"
        },
        {
            "location": "/#component-model",
            "text": "The following chapter depicts ID-software component diagrams, including variations of the components used in different supported environments. \nIn the context of the component diagrams in this document, the ID-software components have been divided to three different packages to show the component\u2019s owner/developer:   Components of ID-software that are owned by RIA and developed by SK:  placed in \u201cRIA/SK\u201d package ;  Components of ID-software that are owned and operated by RIA:  placed in \u201cRIA\u201d package;  Components of ID-software that are owned and developed by SK:  placed in \u201cSK\u201d package.   Other components are regarded as external to ID-software. \nNote that not all of the external base libraries are included in the component model to avoid duplicity with other documentation \u2013 the base libraries are listed and described in the documentation of the respective ID-software components and can be accessed via the references provided.",
            "title": "Component model"
        },
        {
            "location": "/#desktop-applications",
            "text": "",
            "title": "Desktop applications"
        },
        {
            "location": "/#digidoc3-client",
            "text": "Figure: Components of DigiDoc3 Client  Table: Components of DigiDoc3 Client     Component  Description  Owner/ Developer      DigiDoc3 Client  End-user desktop applications that own a common GUI. DigiDoc3 Client enables handling digitally signed documents. DigiDoc3 Crypto subcomponent enables file encryption/decryption. Wiki:  https://github.com/open-eid/qdigidoc/wiki  Code repository:  https://github.com/open-eid/qdigidoc  RIA/SK    DigiDoc3 Client base libraries  Libdigidocpp (and its base libraries, including CDigiDoc), etc. See  ID-card utility's interfaces  -    Error reports repository  Repository where the DigiDoc3 Client application\u2019s and ID-card utility program\u2019s error reports (generated with BreakPad base library) are sent.  RIA    Central configuration service  Described in chap.  Central configuration service  RIA    Kill switch (v3.9-v3.11)  Service for centrally managing DigiDoc3 Client application\u2019s life cycle. The application periodically connects with the service to check if the application\u2019s version is still supported. If not, then the application cannot be used any longer and a newer version must be installed.  RIA    DigiDocService web service  SOAP-based web service that is used by DigiDoc3 Client for signature creation with Mobile-ID. See also  http://www.sk.ee/upload/files/DigiDocService_spec_eng.pdf .  SK/SK    LDAP directory  Directory of active certificates issued by SK (as the CA in Estonia). The directory is used by DigiDoc3 Crypto subcomponent for finding authentication certificate (and the respective public key) of the recipient of the encrypted document. See also  https://sk.ee/en/repository/ldap/ldap-kataloogi-kasutamine/  SK/SK    TSL repository  Repository for accessing the TSL ( Trust Service status List ) lists that can be used as a central source of trust anchor information during digital signature creation and validation processes. The European Commission\u2019s TSL list ( https://ec.europa.eu/information_society/policy/esignature/trusted-list/tl-mp.xml ) is used as the central TSL list (with references to national lists).  -    OCSP service  RFC6960  based OCSP service. Also offered by SK for Estonian and a number of foreign certificates (see  www.sk.ee ).  -    Libdigidocpp  Described in chap.  Software libraries  RIA/SK    CDigiDoc  Described in chap.  Software libraries  RIA/SK    Minidriver  Used via CNG interface in Windows environment only. Described in chap.  Drivers  RIA/SK",
            "title": "DigiDoc3 Client"
        },
        {
            "location": "/#digidoc3-client-interfaces",
            "text": "Provided:   Graphical user interface  - interface for handling ASiC-E/XAdES (i.e. BDOC), DDOC, CDOC documents, setting configuration parameters.  User: end-user  Accessible with: GUI elements    PIN dialog \u2013 for inserting PIN value during signature creation or decryption operations in all operating systems except of Windows  User: end-user  Accessible with: GUI elements     Required:   Central configuration service interface  (since v3.12)  Kill switch service interface  (v3.9-v3.11)  DigiDocService web service interface  Error reports repository interface  LDAP directory interface  Interfaces with base libraries:  Libdigidocpp library\u2019s API  \u2013 for handling documents in supported digital signature formats (BDOC and DDOC).  External base libraries: Qt5, libldap, openssl    Interfaces with cryptographic token\u2019s drivers (described in chap.  Drivers )  PKCS#11 interface  CNG interface",
            "title": "DigiDoc3 Client interfaces"
        },
        {
            "location": "/#id-card-utility",
            "text": "Figure: Components of ID-card utility  Table: Components of ID-card utility     Component  Description  Owner/ Developer      ID-card utility  End-user desktop application for managing ID-card\u2019s PIN/PUK codes replacement, certificates\u2019 renewal and other services. Code repository:  https://github.com/open-eid/qesteidutil  Wiki:  https://github.com/open-eid/qesteidutil/wiki  RIA/SK    ID-card utility\u2019s base libraries  See  ID-card utility's interfaces  -    ID-card owner\u2019s photo repository  Repository where the Estonian national ID-cards photos\u2019 are kept. ID-card\u2019s owner can download the photo after the user has been authenticated with PIN1 code.  RIA    Error reports repository  Described in chap.  DigiDoc3 Client  RIA    @eesti.ee e-mail checking service  Service that enables to set the properties of e-mail address (@eesti.ee) that is provided for Estonian national ID-card owners by the state. The user must be authenticated with PIN1 code.  RIA    Certificate's renewal service (since v3.12)  Service for renewing certificates on the Estonian national ID-card and Digi-ID card.  RIA    M-ID checking service  Service for checking the status of Estonian national ID-card owner\u2019s Mobile-ID certificates. The user must be authenticated with PIN1 code.  SK    Central configuration service  Described in chap.  Central configuration service  RIA    Updater, ID-updater Service  Described in chap.  Updating mechanisms  RIA/SK",
            "title": "ID-card utility"
        },
        {
            "location": "/#id-card-utilitys-interfaces",
            "text": "Provided:   Graphical user interface  \u2013 interface for handling card management operations and using the external services (listed under \u201cRequired interfaces\u201d).  User: end-user  Accessible with: GUI elements    PIN dialog \u2013 for inserting PIN/PUK value in all supported operating systems.  User: end-user  Accessible with: GUI elements     Required:   Central configuration service interface  (since v3.12)  ID-card owners\u2019 photo repository interface  Error reports repository interface  Certificate's renewal service interface  (since v3.12)  Eesti.ee e-mail checking service interface  Mobile-ID validity checking service interface  Interfaces with base libraries: Qt5  Interfaces with cryptographic token\u2019s drivers:  Smartcardpp API (internal component)",
            "title": "ID-card utility's interfaces"
        },
        {
            "location": "/#software-libraries",
            "text": "Figure: Java software libraries and their components   Figure: C/C++ software libraries and their components      Figure: .NET software libraries and components p>  Table: Software libraries and their components     Component  Description  Owner/ Developer      DigiDoc4j  Java software library that enables handling documents in BDOC 2.1(XAdES/ASiC-E) and DIGIDOC-XML 1.3 formats. Documentation:  http://open-eid.github.io/digidoc4j/  Code repository:  https://github.com/open-eid/digidoc4j  RIA/SK    DigiDoc4j utility program  Small command line application that implements the main functionality of DigiDoc4j library. Used for testing purposes. Can also be used as a source for sample client code for using DigiDoc4j. See also  http://open-eid.github.io/digidoc4j/  RIA/SK    JDigiDoc  Java software library that enables handling documents in BDOC 2.1 (XAdES/ASiC-E) and DIGIDOC-XML 1.3 formats and encryption/decryption in ENCDOC-XML 1.0 (CDOC). Documentation:  http://id.ee/public/SK-JDD-PRG-GUIDE.pdf  Code repository:  https://github.com/open-eid/jdigidoc  RIA/SK    JDigiDoc utility program  Small command line application that implements the main functionality of JDigiDoc library. Used for testing purposes. Can also be used as a source for sample client code for using JDigiDoc. See also  http://id.ee/public/SK-JDD-PRG-GUIDE.pdf .  RIA/SK    Libdigidocpp  C++ software library that enables handling documents in BDOC 2.1 \u00a0(XAdES/ASiC-E) and DIGIDOC-XML 1.3 formats (via CDigiDoc base library). Wiki:  https://github.com/open-eid/libdigidocpp/wiki  Code repository:  https://github.com/open-eid/libdigidocpp  Documentation:  http://open-eid.github.io/libdigidocpp/  RIA/SK    Libdigidocpp utility program  Small command line application (digidoc-tool.exe) that implements the main functionality of Libdigidocpp library. Used for testing purposes. Can also be used as a source for sample client code for using Libdigidocpp. See also  http://open-eid.github.io/libdigidocpp/  RIA/SK    CDigiDoc  Software library in C that enables handling digitally signed documents in DIGIDOC-XML 1.3 format and encryption/decryption in ENCDOC-XML 1.0 (CDOC). Documentation:  http://id.ee/public/SK-CDD-PRG-GUIDE.pdf  Code repository:  https://github.com/open-eid/libdigidoc  Wiki:  https://github.com/open-eid/libdigidoc/wiki  RIA/SK    CDigiDoc utility program  Small command line application that implements the main functionality of CDigiDoc library. Used for testing purposes. Can also be used as a source for sample client code for using CDigiDoc. See also  http://id.ee/public/SK-CDD-PRG-GUIDE.pdf  RIA/SK    NDigiDoc  Software library in .NET enabling encryption/decryption in ENCDOC-XML 1.0 (CDOC). Documentation:  http://id.ee/public/NDigiDoc.pdf  Code repository:  https://github.com/open-eid/ndigidoc  SK/SK    NDigiDoc utility program  Small command line application that implements the main functionality of NDigiDoc library. Used for testing purposes. Can also be used as a source for sample client code for using NDigiDoc. See also  http://id.ee/public/NDigiDoc.pdf .  SK/SK    DigiDocCSharp  .NET C# wrapper classes for using Libidigidocpp library\u2019s functionality in .NET environment. Created with Swig tool. See also  https://github.com/open-eid/libdigidocpp/blob/master/examples/DigiDocCSharp/README.md  RIA/SK    TSL repository  Described in chap.  DigiDoc3 Client  -    Time-stamping service  Described in chap.  DigiDoc3 Client  -    OCSP service  Described in chap.  DigiDoc3 Client  -",
            "title": "Software libraries"
        },
        {
            "location": "/#digidoc4j-utility-programs-interfaces",
            "text": "Provided:   DigiDoc4j utility program\u2019s interface  User: server application, end-user application, end-user  Accessible with: command line     Required:   DigiDoc4j API",
            "title": "DigiDoc4j utility program\u2019s interfaces"
        },
        {
            "location": "/#jdigidoc-utility-programs-interfaces",
            "text": "Provided:   JDigiDoc utility program\u2019s interface  User: server application, end-user application, end-user  Accessible with: command line     Required:   JDigiDoc API: see chap.  JDigiDoc library\u2019s interfaces",
            "title": "JDigiDoc utility program\u2019s interfaces"
        },
        {
            "location": "/#libdigidocpp-utility-programs-interfaces",
            "text": "Provided:   Libdigidocpp utility program\u2019s interface  User: server application, end-user application, end-user  Accessible with: command line     Required:   Libdigidocpp API: see chap.  Libdigidocpp library\u2019s interfaces",
            "title": "Libdigidocpp utility program\u2019s interfaces"
        },
        {
            "location": "/#cdigidoc-utility-programs-interfaces",
            "text": "Provided:   CDigiDoc utility program\u2019s interface  User: server application, end-user application, end-user  Accessible with: command line/console     Required:   CDigiDoc API: see chap.  CDigiDoc library\u2019s interfaces",
            "title": "CDigiDoc utility program\u2019s interfaces"
        },
        {
            "location": "/#ndigidoc-utility-programs-interfaces",
            "text": "Provided:   NDigiDoc utility program\u2019s interface  User: server application, end-user application, end-user  Accessible with: command line/console \u00a0\u00a0     Required:   NDigiDoc API: see chap.  NDigiDoc library\u2019s interfaces",
            "title": "NDigiDoc utility program\u2019s interfaces"
        },
        {
            "location": "/#web-components",
            "text": "",
            "title": "Web components"
        },
        {
            "location": "/#web-signing-components",
            "text": "The web signing component diagrams describe components that are needed for signature creation in web applications with eID cards.      Figure: Components for signature creation in web environment  Table: Components for signing in web environment     Component  Description  Owner/ Developer      hwcrypto.js  JavaScript library that enables communication with the browser signing modules (plug-in or extension) of the different web browsers. Wiki:  https://github.com/open-eid/hwcrypto.js/wiki  Code repository:  https://github.com/open-eid/hwcrypto.js  RIA/SK    A web application  A web application that implements signature creation with an eID-card in browser environment.  -    EstEID Firefox plug-in  Browser signing module (NPAPI-based plug-in) that is used in Firefox (supported in Windows and Linux) and Safari (supported in Mac OS) browsers. The plug-in enables data exchange with the cryptographic token\u2019s driver that is used for signing. In Windows environment, the driver that is implementing CNG/CAPI interface is used, along with the operating system\u2019s native PIN insertion and certificate selection dialogs. Otherwise, PKCS#11 driver is used. Code repository:  https://github.com/open-eid/browser-token-signing  Wiki:  https://github.com/open-eid/browser-token-signing/wiki  RIA/SK    EstEIDPluginBHO  Browser signing module (BHO-based plug-in) that is used in Internet explorer browser (supported in Windows operating system). The plug-in enables data exchange with the cryptographic token\u2019s driver that is used for signing. Code repository:  https://github.com/open-eid/browser-token-signing  Wiki:  https://github.com/open-eid/browser-token-signing/wiki  RIA/SK    chrome-token-signing  Comprises two subcomponents: browser extension component and native OSX/Linux/Windows component that implements Native Messaging API (JSON). The browser extension enables data exchange with the native component that in turn interacts with the cryptographic token\u2019s driver for signing. Code repository:  https://github.com/open-eid/chrome-token-signing  Wiki:  https://github.com/open-eid/chrome-token-signing/wiki  RIA/SK    Minidriver  Used via CNG interface in Windows environment only. Described in chap.  Drivers  RIA/SK",
            "title": "Web signing components"
        },
        {
            "location": "/#hwcryptojs-librarys-interfaces",
            "text": "Provided:   hwcrypto.js library\u2019s API  User: a web application in browser environment  Accessible with: JavaScript     Required:   Interfaces with browser signing modules:  EstEID Firefox plug-in\u2019s interfaces  EstEIDPluginBHO plug-in\u2019s interfaces  Chrome-token-signing extension\u2019s interfaces",
            "title": "Hwcrypto.js library\u2019s interfaces"
        },
        {
            "location": "/#web-authentication-components",
            "text": "Authentication in web browsers is done with the browsers\u2019 and operating systems\u2019 native components. In case of authenticating in Firefox browser then Firefox pkcs11-module-loader JavaScript component is used to load the OpenSC PKCS#11 driver by the browser.      Figure: Web authentication components  Table: Web authentication components     Component  Description  Owner/ Developer      pkcs11-loader.js  A JavaScript component that is used to load the OpenSC PKCS#11 driver to the Firefox browser\u2019s cryptographic devices list during each initialization of the browser. Needed during authentication process with eID-card in Firefox browser in all supported operating systems. Code repository:  https://github.com/open-eid/firefox-pkcs11-loader  Wiki:  https://github.com/open-eid/firefox-pkcs11-loader/wiki  RIA/SK    OSX native certificate selection and PIN dialog  PIN dialog and certificate selection windows provided by the operating system\u2019s native components.  -    Minidriver  Described in chap.  Drivers  RIA/SK",
            "title": "Web authentication components"
        },
        {
            "location": "/#drivers",
            "text": "Figure: Cryptographic tokens\u2019 drivers  Table: Cryptographic token driver components     Component  Description  Owner/ Developer      EstEID PKCS#11 driver  A driver for accessing eID-cards. Connects with the card via the operating system\u2019s native PC/SC interface. Used as a default driver for signature creation with eID card in browser environment in case of OSX platform. Used as a default driver for authentication with eID card in browser environment in case of Firefox browser in OSX platform. Code repository:  https://github.com/open-eid/esteid-pkcs11  Wiki:  https://github.com/open-eid/esteid-pkcs11/wiki  RIA/SK    OpenSC PKCS#11 driver  A driver for accessing eID-cards. Connects with the card via the operating system\u2019s native PC/SC interface. Used as a default driver for authentication with eID card in browser environment in case of Windows and Linux platforms. Used as a default driver for signature creation in web browser environment in case of Linux platform. Wiki:  https://github.com/OpenSC/OpenSC/wiki  -    Smartcardpp  eID card driver\u2019s helper component. Inner component. Code repository:  https://github.com/open-eid/smartcardpp  Wiki:  https://github.com/open-eid/smartcardpp/wiki  RIA/SK    Minidriver  Used as a default driver for accessing Estonian eID-cards via CNG interface for signature creation in web browser environment in case of Windows platform. Used as a default driver for authentication with eID card in Chrome and Internet Explorer browsers in case of Windows platform. Code repository:  https://github.com/open-eid/minidriver  Wiki:  https://github.com/open-eid/minidriver/wiki  RIA/SK    ATR Filter  Base component for Minidriver (see  http://support.microsoft.com/kb/981665  for more information).  -    Esteid Tokend  A driver for accessing eID-cards. Connects with the card via the operating system\u2019s native PC/SC interface. Used as a default driver for authentication with eID card in browser environment in case OSX platform. Code repository:  https://github.com/open-eid/esteid-tokend  Wiki:  https://github.com/open-eid/esteid-tokend/wiki  RIA/SK    PKCS#12 implementation via base library  An implementation of PKCS#12 interface by the component\u2019s base libraries.  -",
            "title": "Drivers"
        },
        {
            "location": "/#tokend-driver-interfaces",
            "text": "Components implementing the interface:   EstEID Tokend driver   Provided:   CDSA  User: software library  Accessible with: C++  Documentation: see  https://developer.apple.com/library/mac/documentation/security/conceptual/cryptoservices/CDSA/CDSA.html     Required:   PC/SC: see chap.  PC/SC driver",
            "title": "Tokend driver interfaces"
        },
        {
            "location": "/#pcsc-driver-interfaces",
            "text": "Provided:   PC/SC interface  User: eID-card\u2019s driver  Accessible with: PC/SC API  Documentation: see  http://www.pcscworkgroup.com/specifications/overview.php     Required: not in the scope of this document.",
            "title": "PC/SC driver interfaces"
        },
        {
            "location": "/#updating-mechanisms",
            "text": "The following chapter describes automatic updating mechanisms of different ID-software desktop applications. Several combinations of central software update checking and distribution environments are used depending on the end-user\u2019s operating system.",
            "title": "Updating mechanisms"
        },
        {
            "location": "/#windows-updating-mechanism",
            "text": "Figure: Updating mechanisms in Windows  Table: Updating mechanisms in Windows     Component  Description  Owner/ Developer      ID-updater  Service that is periodically checks if newer versions of related ID-software components are available for download, initiates the download and installation if necessary.  RIA/SK    MS Update  Microsoft Update \u2013 see Microsoft\u2019s documentation for more information.  -    Chrome Web Store  See  https://chrome.google.com/webstore/detail/token-signing/ckjefchnfjhjfedoccjbhjpbncimppeg  -",
            "title": "Windows updating mechanism"
        },
        {
            "location": "/#os-x-updating-mechanism",
            "text": "Figure: Updating mechanisms in OSX  Table: Updating mechanisms in OSX     Component  Description  Owner/ Developer      ID-updater  Described in chap.  Windows updating mechanism  RIA/SK    Apple App Store  See Apple App Store documentation.  -    Chrome Web Store**  See  https://chrome.google.com/webstore/detail/token-signing/ckjefchnfjhjfedoccjbhjpbncimppeg  -",
            "title": "OS X updating mechanism"
        },
        {
            "location": "/#linux-updating-mechanism",
            "text": "Figure: Updating mechanism in Linux  Table: Updating mechanisms in Linux     Component  Description  Owner/ Developer      Ubuntu package updates  Managed and maintained by SK. The binary packages are released for installation and updating to  https://installer.id.ee/media/ubuntu/  repository.  RIA/SK    Packages updates for other distros  Managed by the open-source community. Packages are built, added and updated in Estobuntu and Fedora distributions by the package maintainers.  -    Chrome Web Store  See  https://chrome.google.com/webstore/detail/token-signing/ckjefchnfjhjfedoccjbhjpbncimppeg  -",
            "title": "Linux updating mechanism"
        },
        {
            "location": "/#central-configuration-service",
            "text": "The central configuration service's purpose is to enable on-line and central management of ID-software components configuration settings.     Figure: Central configuration service's client and server components  Table: Central configuration service's components     Component  Description  Owner/ Developer      ID-card Utility  ID-card Utility requests configuration data from the central configuration client component. Described in chap.  ID-card Utility  RIA/SK    DigiDoc3 Client  DigiDoc3 Client requests configuration data from the central configuration client component. Described in chap.  DigiDoc3 Client  RIA/SK    Central configuration client  Central Configuration Client component manages the configuration file validation and updating processes, returns the validated configuration data to the Requesting Application (DigiDoc3 Client or Utility program) and if necessary, updates the data from Central Configuration Server  RIA/SK    Central configuration service  Central Configuration Server component provides configuration data on-line to the Central Configuration Client component  RIA    config.json  The central configuration file is named config.json, the file is in JSON format. The configuration file is signed  RIA/SK    config.rsa  Stores the central configuration file's signature value.  RIA/SK    config.pub  Public key used for validating the central configuration file's signature value.  RIA/SK    QT-commons  Contains common code of DigiDoc3 Client and ID-card Utility program.  RIA/SK    Libdigidocpp  DigiDoc3 Client's base library, also uses the central configuration file's settings. Described in chap.  Software libraries  RIA/SK",
            "title": "Central configuration service"
        },
        {
            "location": "/#central-configuration-client-components-interfaces",
            "text": "Provided:   Central Configuration Client API (qt-common component)  User: DigiDoc3 Client, ID-card Utility  Accessible with: C++     Required:   Central configuration file config.json from the central configuration server  Central configuration file config.json from the local file system (or the local installation package)  Central configuration file's signature config.rsa from the central configuration server  Central configuration file's signature config.rsa from the local file system (or the local installation package)  Client operating system's registry/environment variables  LastCheck entry    Base libraries:  QT framework  OpenSSL",
            "title": "Central configuration client component's interfaces"
        },
        {
            "location": "/#central-configuration-server-components-interfaces",
            "text": "Provided:   Central configuration file config.json  Used by: central configuration client component  Accessible from:  https://id.eesti.ee/config.json    Central configuration file's signature file config.rsa  Used by: central configuration client component  Accessible from:  https://id.eesti.ee/config.rsa    Central configuration file's public key file config.pub  Used by: central configuration client component  Accessible from:  https://id.eesti.ee/config.pub",
            "title": "Central configuration server component's interfaces"
        },
        {
            "location": "/#interfaces-with-external-services",
            "text": "The following chapter describes interfaces that different ID-software components may have with external services. Relatsionships with the external services are depicted in different ID-software component models above.",
            "title": "Interfaces with external services"
        },
        {
            "location": "/#central-configuration-services-interface",
            "text": "Central configuration service is described in a separate chapter, see  Central configuration service .",
            "title": "Central configuration service's interface"
        },
        {
            "location": "/#id-updater-interface",
            "text": "User: DigiDoc3 Client  Accessible with: HTTPS protocol  Accessible from:  Windows:  https://installer.id.ee/media/win/products.xml ,  OSX:  https://installer.id.ee/media/osx/products.xml ,  Linux:  https://installer.id.ee/media/ubuntu/pool/main/",
            "title": "ID-updater interface"
        },
        {
            "location": "/#deployment-model",
            "text": "The following subchapters describe physical deployment of ID-software components in collaboration with external components that were depicted in chap.  Component model  in case of the most common use cases.",
            "title": "Deployment model"
        },
        {
            "location": "/#signing-in-web-browser",
            "text": "Figure: Signing in web browser via a web application  Additional notes:   A DigiDoc software library (i.e. DigiDoc4j, JDigiDoc, Libdigidocpp or CDigiDoc library) and DigiDocService web service are optional and can be used for creating a DDOC or BDOC container and adding the created signature value to the container.  Long term validation data is added to the DDOC/BDOC signature by obtaining OCSP confirmation and optionally a time-stamp  DigiDocService is required in order to sign with Mobile-ID.  Signature value is calculated either in the Mobile-ID SIM card or eID-card\u2019s chip.s  When signing with eID smartcard then the browser signing module is necessary for enabling communication with the smart card connected to the user\u2019s system. Hwcrypto.js library offers a single API for supporting signing modules of all the supported browsers.\u00a0  Optionally, trust anchor data is retrieved from TSL lists \u2013 the European Commission\u2019s central TSL and national TSL\u2019s of the EU member states.",
            "title": "Signing in web browser"
        },
        {
            "location": "/#signing-with-digidoc3-client",
            "text": "Figure: Deployment of components during signature creation with DigiDoc3 Client  Additional notes:   DigiDoc3 Client is used for creating the DDOC or BDOC (XAdES/ASiC-E) container and adding the signature value to the container.  Long term validation data is added to the DDOC/BDOC signature by obtaining OCSP confirmation and optionally a time-stamp  DigiDocService is required in order to sign with Mobile-ID.  Signature value is calculated either in the Mobile-ID SIM card or ID-card\u2019s chip.  Trust anchor data is retrieved from TSL lists \u2013 the European Commission\u2019s central TSL and national TSL\u2019s of the EU member states.",
            "title": "Signing with DigiDoc3 Client"
        }
    ]
}